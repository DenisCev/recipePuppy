//
//  SearchPresenter.swift
//  RecipePTest
//
//  Created by Pablo Vélez  on 19/10/18.
//  Copyright (c) 2018 Denis Menendez. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

import Alamofire

final class SearchPresenter {

    // MARK: - Private properties -

    private unowned let _view: SearchViewInterface
    fileprivate let _interactor: SearchInteractorInterface
    fileprivate let _wireframe: SearchWireframeInterface

    fileprivate var _items: [ResultModel] = [] {
        didSet {
            _view.reloadData()
        }
    }
    
    // MARK: - Lifecycle -

    init(wireframe: SearchWireframeInterface,
         view: SearchViewInterface,
         interactor: SearchInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
    }
}

// MARK: - Extensions -

extension SearchPresenter: SearchPresenterInterface {
    
    func didSelectSearchAction(with query: String?) {
        
        _interactor.getSearchResults(with: query!) { [weak self] (response) -> (Void) in
            self?._handleSearchListResult(response.result)
         }
    }

    func viewDidLoad() {
        
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func numberOrItems(in section: Int) -> Int {
        return _items.count
    }
    
    func item(at indexPath: IndexPath) -> SearchViewItemInterface {
        return _items[indexPath.row] as! SearchViewItemInterface
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        //let result = _items[indexPath.row]
        //_wireframe.navigate(to: .details(result))
    }
    
    // MARK: Utility
    
    private func _handleSearchListResult(_ result: Result<SearchModel>) {
        switch result {
        case .success(let searchObject):
            _items = searchObject.results!
            
            //_view.setEmptyPlaceholderHidden(_items.count > 0)
        case .failure(let error):
            _wireframe.showErrorAlert(with: error.message)
        }
    }
}
